// Copyright (c) 2022 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// Prompts the user and asks for a decision. Typically called by some external
	// process. If the list of actions is empty this service returns immediately,
	// otherwise it blocks until the user has made their choice.
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	// Subscribe to notifications. Typically called by the IDE.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (NotificationService_SubscribeClient, error)
	// Report a user's choice as a response to a notification. Typically called by
	// the IDE.
	Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*RespondResponse, error)
	// SetActiveClient to inform supervisor about
	// which is the latest client actively used by the user.
	// Typically called by the IDE.
	// Will response what client should do like `open` `preview`
	SetActiveClient(ctx context.Context, in *SetActiveClientRequest, opts ...grpc.CallOption) (NotificationService_SetActiveClientClient, error)
	// Action is used by gp cli to request to supervisor to send an action request
	// to the active client (used for gp open, gp preview) to make sure we run commands
	// in the latest active client
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Used by gp cli to inform supervisor on the outcome of requested Actions
	ActionRespond(ctx context.Context, in *ActionRespondRequest, opts ...grpc.CallOption) (*ActionRespondResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/supervisor.NotificationService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (NotificationService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/supervisor.NotificationService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type notificationServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *notificationServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) Respond(ctx context.Context, in *RespondRequest, opts ...grpc.CallOption) (*RespondResponse, error) {
	out := new(RespondResponse)
	err := c.cc.Invoke(ctx, "/supervisor.NotificationService/Respond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SetActiveClient(ctx context.Context, in *SetActiveClientRequest, opts ...grpc.CallOption) (NotificationService_SetActiveClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[1], "/supervisor.NotificationService/SetActiveClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceSetActiveClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_SetActiveClientClient interface {
	Recv() (*SetActiveClientResponse, error)
	grpc.ClientStream
}

type notificationServiceSetActiveClientClient struct {
	grpc.ClientStream
}

func (x *notificationServiceSetActiveClientClient) Recv() (*SetActiveClientResponse, error) {
	m := new(SetActiveClientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/supervisor.NotificationService/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ActionRespond(ctx context.Context, in *ActionRespondRequest, opts ...grpc.CallOption) (*ActionRespondResponse, error) {
	out := new(ActionRespondResponse)
	err := c.cc.Invoke(ctx, "/supervisor.NotificationService/ActionRespond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	// Prompts the user and asks for a decision. Typically called by some external
	// process. If the list of actions is empty this service returns immediately,
	// otherwise it blocks until the user has made their choice.
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	// Subscribe to notifications. Typically called by the IDE.
	Subscribe(*SubscribeRequest, NotificationService_SubscribeServer) error
	// Report a user's choice as a response to a notification. Typically called by
	// the IDE.
	Respond(context.Context, *RespondRequest) (*RespondResponse, error)
	// SetActiveClient to inform supervisor about
	// which is the latest client actively used by the user.
	// Typically called by the IDE.
	// Will response what client should do like `open` `preview`
	SetActiveClient(*SetActiveClientRequest, NotificationService_SetActiveClientServer) error
	// Action is used by gp cli to request to supervisor to send an action request
	// to the active client (used for gp open, gp preview) to make sure we run commands
	// in the latest active client
	Action(context.Context, *ActionRequest) (*ActionResponse, error)
	// Used by gp cli to inform supervisor on the outcome of requested Actions
	ActionRespond(context.Context, *ActionRespondRequest) (*ActionRespondResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedNotificationServiceServer) Subscribe(*SubscribeRequest, NotificationService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNotificationServiceServer) Respond(context.Context, *RespondRequest) (*RespondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Respond not implemented")
}
func (UnimplementedNotificationServiceServer) SetActiveClient(*SetActiveClientRequest, NotificationService_SetActiveClientServer) error {
	return status.Errorf(codes.Unimplemented, "method SetActiveClient not implemented")
}
func (UnimplementedNotificationServiceServer) Action(context.Context, *ActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedNotificationServiceServer) ActionRespond(context.Context, *ActionRespondRequest) (*ActionRespondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionRespond not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.NotificationService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).Subscribe(m, &notificationServiceSubscribeServer{stream})
}

type NotificationService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type notificationServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *notificationServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_Respond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Respond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.NotificationService/Respond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Respond(ctx, req.(*RespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SetActiveClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetActiveClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).SetActiveClient(m, &notificationServiceSetActiveClientServer{stream})
}

type NotificationService_SetActiveClientServer interface {
	Send(*SetActiveClientResponse) error
	grpc.ServerStream
}

type notificationServiceSetActiveClientServer struct {
	grpc.ServerStream
}

func (x *notificationServiceSetActiveClientServer) Send(m *SetActiveClientResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.NotificationService/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).Action(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ActionRespond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRespondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ActionRespond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.NotificationService/ActionRespond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ActionRespond(ctx, req.(*ActionRespondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _NotificationService_Notify_Handler,
		},
		{
			MethodName: "Respond",
			Handler:    _NotificationService_Respond_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _NotificationService_Action_Handler,
		},
		{
			MethodName: "ActionRespond",
			Handler:    _NotificationService_ActionRespond_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _NotificationService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetActiveClient",
			Handler:       _NotificationService_SetActiveClient_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}
